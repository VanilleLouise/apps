# models.py - Version optimisée et corrigée
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, BaseUserManager
from django.core.validators import MinValueValidator, MaxValueValidator
from django.utils import timezone
import json

class UtilisateurManager(BaseUserManager):
    def create_user(self, email, nom, prenom, password=None, **extra_fields):
        if not email:
            raise ValueError('Un email est requis')
        email = self.normalize_email(email)
        user = self.model(email=email, nom=nom, prenom=prenom, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, nom, prenom, password=None, **extra_fields):
        extra_fields.setdefault('statut', 'admin')
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(email, nom, prenom, password, **extra_fields)

class Utilisateur(AbstractBaseUser, PermissionsMixin):
    STATUTS = [
        ('admin', 'Administrateur'),
        ('membre_actif', 'Membre Actif'),
        ('benevole', 'Bénévole'),
        ('adherent', 'Adhérent'),
    ]

    # Informations de base
    email = models.EmailField(unique=True, db_index=True)
    nom = models.CharField(max_length=100)
    prenom = models.CharField(max_length=100)
    telephone = models.CharField(max_length=20, blank=True, null=True)
    date_naissance = models.DateField(blank=True, null=True)
    ville = models.CharField(max_length=100, blank=True, null=True)
    
    # Statut et permissions
    statut = models.CharField(max_length=20, choices=STATUTS, default='adherent', db_index=True)
    is_active = models.BooleanField(default=True, db_index=True)  # Renommé de 'actif'
    is_staff = models.BooleanField(default=False)  # Nécessaire pour Django admin
    
    # Engagement associatif
    disponibilites = models.JSONField(default=dict, blank=True)
    competences_partagees = models.TextField(blank=True)
    interets = models.TextField(blank=True)
    contrepartie_souhaitee = models.TextField(blank=True)
    
    # Dates et métadonnées
    date_inscription = models.DateTimeField(default=timezone.now)
    last_login = models.DateTimeField(blank=True, null=True)  # Renommé
    date_derniere_cotisation = models.DateField(blank=True, null=True)
    montant_derniere_cotisation = models.DecimalField(
        max_digits=10, decimal_places=2, blank=True, null=True,
        validators=[MinValueValidator(0)]
    )
    
    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['nom', 'prenom']

    objects = UtilisateurManager()

    class Meta:
        verbose_name = 'Utilisateur'
        verbose_name_plural = 'Utilisateurs'
        ordering = ['nom', 'prenom']

    def __str__(self):
        return f"{self.prenom} {self.nom}"
    
    @property
    def nom_complet(self):
        return f"{self.prenom} {self.nom}"
    
    @property
    def is_admin(self):
        return self.statut == 'admin'

class Thematique(models.Model):
    nom = models.CharField(max_length=100, unique=True)
    description = models.TextField(blank=True)
    couleur = models.CharField(max_length=7, default='#000000')
    icone = models.CharField(max_length=50, blank=True)
    actif = models.BooleanField(default=True, db_index=True)
    ordre = models.IntegerField(default=0)  # Pour ordonner l'affichage
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = 'Thématique'
        verbose_name_plural = 'Thématiques'
        ordering = ['ordre', 'nom']

    def __str__(self):
        return self.nom

class Evenement(models.Model):
    TYPE_CHOICES = [
        ('atelier', 'Atelier'),
        ('chantier', 'Chantier'),
        ('reunion', 'Réunion'),
        ('formation', 'Formation'),
        ('festivite', 'Festivité'),
        ('autre', 'Autre'),
    ]
    
    STATUT_CHOICES = [
        ('planifie', 'Planifié'),
        ('confirme', 'Confirmé'),
        ('en_cours', 'En cours'),
        ('termine', 'Terminé'),
        ('annule', 'Annulé'),
    ]

    # Informations principales
    titre = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    
    # Temporalité
    date_debut = models.DateTimeField(db_index=True)
    date_fin = models.DateTimeField(blank=True, null=True)
    duree_estimee = models.IntegerField(
        blank=True, null=True,
        help_text="Durée en minutes"
    )
    
    # Localisation
    lieu = models.CharField(max_length=200, blank=True)
    adresse = models.TextField(blank=True)
    
    # Classification
    thematique = models.ForeignKey(
        Thematique, 
        on_delete=models.SET_NULL, 
        null=True, 
        blank=True,
        related_name='evenements'
    )
    type_evenement = models.CharField(max_length=20, choices=TYPE_CHOICES)
    
    # Gestion des participants
    nombre_places_max = models.IntegerField(blank=True, null=True)
    nombre_inscrits = models.IntegerField(default=0, editable=False)  # Calculé automatiquement
    inscription_obligatoire = models.BooleanField(default=False)
    
    # Informations financières
    tarif = models.DecimalField(
        max_digits=10, decimal_places=2, default=0,
        validators=[MinValueValidator(0)]
    )
    frais_participation = models.TextField(blank=True)
    
    # Ressources
    besoins_competences = models.JSONField(default=list, blank=True)
    materiels_necessaires = models.TextField(blank=True)
    materiels_fournis = models.TextField(blank=True)
    
    # Organisation
    organisateur = models.ForeignKey(
        Utilisateur, 
        on_delete=models.CASCADE,
        related_name='evenements_organises'
    )
    statut = models.CharField(
        max_length=20, 
        choices=STATUT_CHOICES, 
        default='planifie',
        db_index=True
    )
    publique = models.BooleanField(default=True)
    
    # Notes et retours
    notes_organisation = models.TextField(blank=True)
    retour_experience = models.TextField(blank=True)
    
    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = 'Événement'
        verbose_name_plural = 'Événements'
        ordering = ['-date_debut']
        constraints = [
            models.CheckConstraint(
                check=models.Q(date_fin__isnull=True) | models.Q(date_fin__gte=models.F('date_debut')),
                name='date_fin_posterieure'
            ),
            models.CheckConstraint(
                check=models.Q(nombre_places_max__isnull=True) | models.Q(nombre_places_max__gt=0),
                name='places_positives'
            )
        ]

    def __str__(self):
        return f"{self.titre} - {self.date_debut.strftime('%d/%m/%Y')}"
    
    @property
    def places_disponibles(self):
        if self.nombre_places_max:
            return max(0, self.nombre_places_max - self.nombre_inscrits)
        return None
    
    @property
    def is_complet(self):
        if self.nombre_places_max:
            return self.nombre_inscrits >= self.nombre_places_max
        return False

class InscriptionEvenement(models.Model):
    STATUT_CHOICES = [
        ('inscrit', 'Inscrit'),
        ('confirme', 'Confirmé'),
        ('present', 'Présent'),
        ('absent', 'Absent'),
        ('annule', 'Annulé'),
    ]

    # Relations
    utilisateur = models.ForeignKey(
        Utilisateur, 
        on_delete=models.CASCADE,
        related_name='inscriptions'
    )
    evenement = models.ForeignKey(
        Evenement, 
        on_delete=models.CASCADE,
        related_name='inscriptions'
    )
    
    # Statut et dates
    date_inscription = models.DateTimeField(default=timezone.now)
    statut = models.CharField(
        max_length=20, 
        choices=STATUT_CHOICES, 
        default='inscrit',
        db_index=True
    )
    
    # Informations participant
    commentaire = models.TextField(blank=True)
    besoins_speciaux = models.TextField(blank=True)
    transport_propose = models.BooleanField(default=False)
    transport_recherche = models.BooleanField(default=False)
    
    # Paiement
    paiement_effectue = models.BooleanField(default=False)
    montant_paye = models.DecimalField(
        max_digits=10, decimal_places=2, default=0,
        validators=[MinValueValidator(0)]
    )
    mode_paiement = models.CharField(max_length=50, blank=True)
    
    # Retour d'expérience
    note_satisfaction = models.IntegerField(
        blank=True, null=True,
        validators=[MinValueValidator(1), MaxValueValidator(5)]
    )
    commentaire_retour = models.TextField(blank=True)
    
    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = 'Inscription'
        verbose_name_plural = 'Inscriptions'
        unique_together = ['utilisateur', 'evenement']
        ordering = ['-date_inscription']

    def __str__(self):
        return f"{self.utilisateur} - {self.evenement}"

# Ajout des modèles manquants du schéma SQL

class Projet(models.Model):
    PRIORITE_CHOICES = [
        ('basse', 'Basse'),
        ('normale', 'Normale'),
        ('haute', 'Haute'),
        ('urgente', 'Urgente'),
    ]
    
    STATUT_CHOICES = [
        ('idee', 'Idée'),
        ('planifie', 'Planifié'),
        ('en_cours', 'En cours'),
        ('en_pause', 'En pause'),
        ('termine', 'Terminé'),
        ('abandonne', 'Abandonné'),
    ]

    nom = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    
    # Classification
    thematique = models.ForeignKey(
        Thematique,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='projets'
    )
    priorite = models.CharField(max_length=20, choices=PRIORITE_CHOICES, default='normale')
    
    # Planning
    date_debut_prevue = models.DateField(blank=True, null=True)
    date_fin_prevue = models.DateField(blank=True, null=True)
    duree_estimee_jours = models.IntegerField(blank=True, null=True)
    
    # Ressources
    budget_estime = models.DecimalField(
        max_digits=10, decimal_places=2,
        blank=True, null=True,
        validators=[MinValueValidator(0)]
    )
    nombre_benevoles_requis = models.IntegerField(blank=True, null=True)
    competences_requises = models.JSONField(default=list, blank=True)
    materiels_requis = models.TextField(blank=True)
    
    # Suivi
    statut = models.CharField(
        max_length=20,
        choices=STATUT_CHOICES,
        default='idee',
        db_index=True
    )
    pourcentage_completion = models.IntegerField(
        default=0,
        validators=[MinValueValidator(0), MaxValueValidator(100)]
    )
    
    # Responsabilité
    responsable = models.ForeignKey(
        Utilisateur,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='projets_responsable'
    )
    
    # Détails
    objectifs = models.TextField(blank=True)
    resultats_attendus = models.TextField(blank=True)
    notes = models.TextField(blank=True)
    
    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = 'Projet'
        verbose_name_plural = 'Projets'
        ordering = ['-priorite', '-created_at']

    def __str__(self):
        return self.nom

class Competence(models.Model):
    NIVEAU_CHOICES = [
        ('debutant', 'Débutant'),
        ('intermediaire', 'Intermédiaire'),
        ('avance', 'Avancé'),
        ('expert', 'Expert'),
    ]
    
    nom = models.CharField(max_length=100, unique=True)
    description = models.TextField(blank=True)
    categorie = models.CharField(max_length=50, blank=True)
    niveau_requis = models.CharField(
        max_length=20,
        choices=NIVEAU_CHOICES,
        default='debutant'
    )
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = 'Compétence'
        verbose_name_plural = 'Compétences'
        ordering = ['categorie', 'nom']

    def __str__(self):
        return self.nom

class UtilisateurCompetence(models.Model):
    NIVEAU_CHOICES = [
        ('debutant', 'Débutant'),
        ('intermediaire', 'Intermédiaire'),
        ('avance', 'Avancé'),
        ('expert', 'Expert'),
    ]
    
    utilisateur = models.ForeignKey(
        Utilisateur,
        on_delete=models.CASCADE,
        related_name='competences'
    )
    competence = models.ForeignKey(
        Competence,
        on_delete=models.CASCADE,
        related_name='utilisateurs'
    )
    niveau = models.CharField(max_length=20, choices=NIVEAU_CHOICES)
    certifie = models.BooleanField(default=False)
    date_acquisition = models.DateField(blank=True, null=True)
    notes = models.TextField(blank=True)

    class Meta:
        verbose_name = 'Compétence utilisateur'
        verbose_name_plural = 'Compétences utilisateurs'
        unique_together = ['utilisateur', 'competence']
        ordering = ['competence__categorie', 'competence__nom']

    def __str__(self):
        return f"{self.utilisateur} - {self.competence} ({self.niveau})"

# Signals pour maintenir la cohérence des données
from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver

@receiver([post_save, post_delete], sender=InscriptionEvenement)
def update_nombre_inscrits(sender, instance, **kwargs):
    """Met à jour automatiquement le nombre d'inscrits à un événement"""
    if instance.evenement:
        count = InscriptionEvenement.objects.filter(
            evenement=instance.evenement,
            statut__in=['inscrit', 'confirme', 'present']
        ).count()
        Evenement.objects.filter(pk=instance.evenement.pk).update(nombre_inscrits=count)
